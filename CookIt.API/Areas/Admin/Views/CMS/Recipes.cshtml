@model CookIt.API.Areas.Admin.Models.RecipesVm
@{
    ViewData["Title"] = "Recipes";
    Layout = "~/Areas/Admin/Views/Shared/CMS_Layout.cshtml";
}

@section CSS {
    <style>
        #recipeListContainer {
            margin-top: .67em;
        }

        #loading {
            height: calc(100vh - 200px);
            position: relative;
        }

        #recipeList {
            display: none;
        }

        .table-striped > tbody > tr > td > div {
            padding: 5px;
            margin-bottom: 3px;
        }

        .table-striped > tbody > tr:nth-of-type(even) > td > div:nth-child(even) {
            background: #f9f9f9;
        }

        .table-striped > tbody > tr:nth-of-type(odd) > td > div:nth-child(even) {
            background: #ffffff;
        }

        .select2-results .select2-disabled, .select2-results__option[aria-disabled=true] {
            display: none;
        }

        .ingredient {
            user-select: none;
            cursor: pointer;
            color: #fff;
            background-color: #17a2b8;
            position: relative;
        }

            .ingredient > select {
                color: #000;
                position: absolute;
                top: 0;
                left: 0;
                bottom: 0;
                right: 0;
                width: 100%;
            }

        body.modal-open {
            overflow: hidden;
        }
    </style>
}

<h1>Recipes</h1>
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModal" aria-hidden="true">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title" id="myModalLabel">Ingredient</h4>
            </div>
            <div class="modal-body">
                <select id="ingredientList" style="width:100%"></select>
            </div>
            <div class="modal-footer">
                <button id="matchedIngredientCreateBtn" type="button" class="btn btn-success" onclick="confirmUpdateOfMatchedIngredient()">Create</button>
                <button id="matchedIngredientUpdateBtn" type="button" class="btn btn-primary" onclick="confirmUpdateOfMatchedIngredient()">Update</button>
                <button id="matchedIngredientDeleteBtn" type="button" class="btn btn-danger" onclick="confirmDeleteOfRecipeSentenceIngredient()">Delete</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<a class="btn btn-default mb-2" href="/Admin/Cms/CreateRecipes/">CreateRecipes</a>
<div id="recipeListContainer">
    <div id="loading">
        <div id="spinner"></div>
    </div>
    <table id="recipeList" class="table table-striped table-bordered dt-responsive nowrap" cellspacing="0" width="100%">
        <thead>
            <tr>
                <th class="text-center" style="width: 20%; "><i class="fa fa-picture-o" aria-hidden="true"></i></th>
                <th class="" style="width: 20%; ">Title</th>
                <th class="" style="width:10%;">Host</th>
                <th class="" style="width:40%;">
                    <div>
                        <div style="width:50%; display:inline-block;">Recipesentence</div>
                        <div style="width:50%; display:inline-block;">Matched ingredients</div>
                    </div>
                </th>
                <th class="text-center" style="width:10%;">Action(s)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var recipe in Model.Recipes)
            {
                <tr>
                    <td style="text-align: center;">
                        <img class="lazy" style="width:200px;" src="@recipe.ImageUrl" alt="@recipe.Title" title="@recipe.Title" />
                    </td>
                    <td>
                        <a href="@recipe.Url">@recipe.Title</a>
                    </td>
                    <td>
                        @recipe.Host.Name
                    </td>
                    <td>
                        @foreach (var recipeSentence in recipe.RecipeSentences)
                        {
                            <div>
                                <div style="width:50%; display:inline-block; vertical-align:top; white-space: initial;">@recipeSentence.DerivedFrom</div>
                                <div style="width:50%; display:inline-block; vertical-align:top;">
                                    @foreach (var recipeSentenceIngredient in recipeSentence.RecipeSentenceIngredients)
                                    {

                                        <span class="badge ingredient" onclick="prepareModal(this)" data-recipeSentenceIngredientId="@recipeSentenceIngredient.Id" data-ingredientId="@recipeSentenceIngredient.Ingredient.Id">
                                            <span class="ingredientName">@recipeSentenceIngredient.Ingredient.Name</span>
                                        </span>
                                    }
                                </div>
                            </div>
                        }
                    </td>
                    <td class="text-center">
                        <a class="btn btn-danger" onclick="return confirm('Are you sure?')" href="/Admin/Cms/DeleteRecipe/@recipe.Id"><i class="fa fa-trash" aria-hidden="true"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section JS{
    <script>
        let currentSelectedRecipeSentenceIngredientId;
        function prepareModal(e) {
            let ingredientBadgeElement = e;
            let ingredientIdFromBadge = ingredientBadgeElement.getAttribute("data-ingredientId");
            currentSelectedRecipeSentenceIngredientId = ingredientBadgeElement.getAttribute("data-recipeSentenceIngredientId");
            $('#ingredientList').val(ingredientIdFromBadge).trigger('change');
            $('#myModal').modal();
        }
        function confirmDeleteOfRecipeSentenceIngredient() {
            let result = confirm("Are you sure?");
            if (result) {
                    $('#myModal').modal('hide');
                    $.ajax({
                        url: '/api/CMSApi/DeleteRecipeSentenceIngredient/' + currentSelectedRecipeSentenceIngredientId,
                        method: 'POST',
                        dataType: 'json',
                        statusCode: {
                            204: function (error) {
                                console.log("ERROR: /api/CMSApi/" + currentSelectedRecipeSentenceIngredientId + " => " + error);
                            },
                            200: function (data) {
                                let ingredientBadgeElement = $("[data-recipeSentenceIngredientId=" + currentSelectedRecipeSentenceIngredientId + "]");
                                ingredientBadgeElement.remove();
                            }

                        }
                    })
                return true;
            }
            return false;
        }

        function confirmUpdateOfMatchedIngredient() {
            let json = {
                "recipeSentenceIngredientId": currentSelectedRecipeSentenceIngredientId,
                "ingredientValue": $('#ingredientList').val()
            }
            let result = confirm("Are you sure?");
            if (result) {
                $('#myModal').modal('hide');
                $.ajax({
                    contentType: 'application/json',
                    url: '/api/CMSApi/UpdateRecipeSentenceIngredient/',
                    method: 'POST',
                    dataType: 'json',
                    data: JSON.stringify(json),
                    complete: function (e, xhr, settings) {
                        switch (e.status) {
                            case 200:

                                let ingredientBadgeElement = $("[data-recipeSentenceIngredientId=" + e.responseJSON.id + "]")[0];
                                let ingredientSpanElement = ingredientBadgeElement.getElementsByClassName("ingredientName")[0];
                                ingredientBadgeElement.setAttribute("data-ingredientId", e.responseJSON.ingredientId);
                                ingredientSpanElement.textContent = e.responseJSON.ingredientName;
                                if ($("#ingredientList option[value='" + e.responseJSON.ingredientId + "']").length === 0) {
                                    var newState = new Option(e.responseJSON.ingredientName, e.responseJSON.ingredientId, false, false);
                                    $("#ingredientList").append(newState).trigger('change');
                                }
                                break;
                            case 204:
                                AjaxError(xhr, textStatus, errorThrown);
                            default:
                            break;
                        }
                    }
                })
                return true;
            }
            return false;
        }

        $().ready(function () {
            $('#recipeList').DataTable({
                "pagingType": "full_numbers",
                "order": [[1, "asc"]],
                "columnDefs": [{
                    "targets": [0, 3, 4], "sortable": false
                }],
                "initComplete": function () {
                    this.api().columns([2]).every(function (e) {//For every columns||column[i] run the function.
                        let column = this;
                        let title = $('#recipeList thead th').eq(e).text();
                        let select = $('<select><option value=""> Select ' + title + '</option></select>')
                            .appendTo($(column.header()).empty())
                            .on('click', function (e) {
                                e.stopPropagation();//Prevents autosorting of columns to happen when clicking on the select tag.
                            })
                            .on('change', function () {

                                let val = $.fn.dataTable.util.escapeRegex(
                                    $(this).val()
                                );

                                column
                                    .search(val ? '^' + val + '$' : '', true, false)
                                    .draw();
                            });
                        column.data().unique().sort().each(function (d, j) {//Figure out a way to combine Razor and Javascript/Jquery
                            select.append('<option value="' + d + '">' + d + '</option>')
                        });
                    });
                },
                "drawCallback": function(){
                    //$("img.lazy").lazyload();
                }
            });
            $('#loading').hide();

            $('#recipeList').show();
        });
        $('#ingredientList').select2({
            data:  @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Ingredients.Select(x => new { id = x.Id, text = x.Name, disabled = x.Id.ToString() == "00000000-0000-0000-0000-000000000000" ? true: false } ))),
            placeholder: 'search',
            multiple: false,
            sorter: function(results) {
                var query = $('.select2-search__field').val().toLowerCase();
                return results.sort(function(a, b) {
                    return a.text.toLowerCase().indexOf(query) - b.text.toLowerCase().indexOf(query);
                });
            },
            tags: true
        });

        $('#ingredientList').on('change.select2', function () {
            let text = $('#ingredientList').val();
            if (isValidGuid(text) === true) {
                $('#matchedIngredientCreateBtn').hide();
                $("#matchedIngredientUpdateBtn").attr("disabled", false);
                $('#matchedIngredientUpdateBtn').show();
            }
            else if (text === null) {
                $('#matchedIngredientCreateBtn').hide();
                $("#matchedIngredientUpdateBtn").attr("disabled", true);
                $('#matchedIngredientUpdateBtn').show();
            }
            else {
                $('#matchedIngredientUpdateBtn').hide();
                $('#matchedIngredientCreateBtn').show();
            }
        });
        function isValidGuid(text) {
            let guidPattern = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$', 'i');
            return guidPattern.test(text) === true;
        }

        let target = document.getElementById('spinner');
        let spinner = new Spinner().spin(target);
    </script>
}
